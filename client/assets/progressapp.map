{"version":3,"sources":["vendor/ember-cli/app-prefix.js","progressapp/adapters/application.js","progressapp/app.js","progressapp/components/ember-modal-dialog-positioned-container.js","progressapp/components/ember-wormhole.js","progressapp/components/increment-buttons.js","progressapp/components/modal-dialog.js","progressapp/components/page-header.js","progressapp/components/page-title.js","progressapp/components/progress-bar.js","progressapp/components/progressbar-item.js","progressapp/components/progressbar-list.js","progressapp/controllers/array.js","progressapp/controllers/object.js","progressapp/initializers/add-modals-container.js","progressapp/initializers/app-version.js","progressapp/initializers/export-application-global.js","progressapp/models/progress-bar.js","progressapp/router.js","progressapp/routes/index.js","progressapp/serializers/application.js","progressapp/services/modal-dialog.js","progressapp/templates/application.js","progressapp/templates/components/increment-buttons.js","progressapp/templates/components/modal-dialog.js","progressapp/templates/components/page-header.js","progressapp/templates/components/page-title.js","progressapp/templates/components/progress-bar.js","progressapp/templates/components/progressbar-item.js","progressapp/templates/components/progressbar-list.js","progressapp/templates/index.js","progressapp/tests/adapters/application.jshint.js","progressapp/tests/app.jshint.js","progressapp/tests/components/increment-buttons.jshint.js","progressapp/tests/components/page-header.jshint.js","progressapp/tests/components/page-title.jshint.js","progressapp/tests/components/progress-bar.jshint.js","progressapp/tests/components/progressbar-item.jshint.js","progressapp/tests/components/progressbar-list.jshint.js","progressapp/tests/helpers/resolver.js","progressapp/tests/helpers/resolver.jshint.js","progressapp/tests/helpers/start-app.js","progressapp/tests/helpers/start-app.jshint.js","progressapp/tests/models/progress-bar.jshint.js","progressapp/tests/router.jshint.js","progressapp/tests/routes/index.jshint.js","progressapp/tests/serializers/application.jshint.js","progressapp/tests/test-helper.js","progressapp/tests/test-helper.jshint.js","progressapp/tests/unit/adapters/application-test.js","progressapp/tests/unit/adapters/application-test.jshint.js","progressapp/tests/unit/components/increment-buttons-test.js","progressapp/tests/unit/components/increment-buttons-test.jshint.js","progressapp/tests/unit/components/page-header-test.js","progressapp/tests/unit/components/page-header-test.jshint.js","progressapp/tests/unit/components/page-title-test.js","progressapp/tests/unit/components/page-title-test.jshint.js","progressapp/tests/unit/components/progress-bar-test.js","progressapp/tests/unit/components/progress-bar-test.jshint.js","progressapp/tests/unit/components/progressbar-item-test.js","progressapp/tests/unit/components/progressbar-item-test.jshint.js","progressapp/tests/unit/components/progressbar-list-test.js","progressapp/tests/unit/components/progressbar-list-test.jshint.js","progressapp/tests/unit/models/progress-bar-test.js","progressapp/tests/unit/models/progress-bar-test.jshint.js","progressapp/tests/unit/routes/index-test.js","progressapp/tests/unit/routes/index-test.jshint.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('progressapp/adapters/application', ['exports', 'ember-data', 'ember'], function (exports, DS, Ember) {\n\n  'use strict';\n\n  var adapter;\n\n  // function caselessSubstrMatch(needle, haystack) {\n  //   needle = needle.toString().toLowerCase();\n  //   haystack = haystack.toString().toLowerCase();\n\n  //   return haystack.indexOf(needle) >= 0;\n  // }\n\n  // if (window.ContractsApp.MOCK_API) {\n  //   adapter = DS.FixtureAdapter.extend({\n\n  //     //filters don't work with fixture adapter out of the box, adding support\n  //     //here\n  //     queryFixtures: function(records, query) {\n  //       if (!query) {\n  //         return records;\n  //       }\n\n  //       var searchParams = query.query;\n  //       return records.filter(record => {\n\n  //         if (!!searchParams) {\n  //           return Object.keys(record).some(key => {\n  //             return !!record[key] && caselessSubstrMatch(searchParams, record[key]);\n  //           });\n  //         } else {\n  //           return Object.keys(query).every(queryKey => {\n  //             return record[queryKey] === query[queryKey];\n  //           });\n  //         }\n\n  //       });\n  //     }\n  //   });\n  // } else {\n  adapter = DS['default'].RESTAdapter.extend({\n    namespace: 'api',\n\n    // @private\n    // @override\n    ajaxOptions: function ajaxOptions(url, type, options) {\n      var hash = this._super(url, type, options);\n\n      if (type === 'GET' && !!hash.data && !!hash.data.where) {\n        hash.url = hash.url + '?filter=' + encodeURIComponent(JSON.stringify(hash.data));\n        delete hash.data.where;\n      }\n\n      return hash;\n    },\n\n    // @override\n    ajaxError: function ajaxError(jqXHR, responseText, errorThrown) {\n      var error = this._super(jqXHR, responseText, errorThrown);\n\n      if (jqXHR && jqXHR.status === 422) {\n        return new DS['default'].InvalidError(Ember['default'].$.parseJSON(jqXHR.responseText));\n      } else {\n        return error;\n      }\n    } });\n  // }\n\n  exports['default'] = adapter;\n\n});","define('progressapp/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'progressapp/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  var App;\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('progressapp/components/ember-modal-dialog-positioned-container', ['exports', 'ember-modal-dialog/components/positioned-container'], function (exports, Component) {\n\n\t'use strict';\n\n\texports['default'] = Component['default'];\n\n});","define('progressapp/components/ember-wormhole', ['exports', 'ember-wormhole/components/ember-wormhole'], function (exports, Component) {\n\n\t'use strict';\n\n\texports['default'] = Component['default'];\n\n});","define('progressapp/components/increment-buttons', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    actions: {\n      left: function left() {\n        if (this.get('value') <= 0) return;\n        this.set('value', this.get('value') - 1);\n        this.sendAction('update');\n        if (this.get('value') <= 0) this.set('value', 0);\n      },\n      leftleft: function leftleft() {\n        if (this.get('value') <= 0) return;\n        this.set('value', this.get('value') - 10);\n        this.sendAction('update');\n        if (this.get('value') <= 0) this.set('value', 0);\n      },\n      right: function right() {\n        if (this.get('value') >= 100) return;\n        this.set('value', this.get('value') + 1);\n        this.sendAction('update');\n        if (this.get('value') >= 100) this.set('value', 100);\n      },\n      rightright: function rightright() {\n        if (this.get('value') >= 100) return;\n        this.set('value', this.get('value') + 10);\n        this.sendAction('update');\n        if (this.get('value') >= 100) this.set('value', 100);\n      }\n    }\n  });\n\n});","define('progressapp/components/modal-dialog', ['exports', 'ember-modal-dialog/components/modal-dialog'], function (exports, Component) {\n\n\t'use strict';\n\n\texports['default'] = Component['default'];\n\n});","define('progressapp/components/page-header', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    showModal: false,\n\n    progressBarName: '',\n\n    actions: {\n      toggleShowModal: function toggleShowModal() {\n        this.toggleProperty('showModal');\n      },\n\n      createProgressBar: function createProgressBar() {\n        this.sendAction('createProgressBar', {\n          title: this.get('progressBarName'),\n          value: 0,\n          max: 100\n        });\n        this.set('showModal', false);\n        this.set('progressBarName', '');\n      }\n    }\n  });\n\n});","define('progressapp/components/page-title', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Component.extend({});\n\n});","define('progressapp/components/progress-bar', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    didInsertElement: function didInsertElement() {\n      this.$('.progress-bar-highlight').css('width', this.get('value') + '%');\n    },\n    updateValue: (function () {\n      this.$('.progress-bar-highlight').css('width', this.get('value') + '%');\n    }).observes('value')\n  });\n\n});","define('progressapp/components/progressbar-item', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    actions: {\n      'delete': function _delete() {\n        this.get('data').destroyRecord();\n      },\n\n      update: function update() {\n        this.get('data').save();\n      }\n    }\n  });\n\n});","define('progressapp/components/progressbar-list', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Component.extend({});\n\n});","define('progressapp/controllers/array', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Controller;\n\n});","define('progressapp/controllers/object', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Controller;\n\n});","define('progressapp/initializers/add-modals-container', ['exports', 'ember-modal-dialog/initializers/add-modals-container'], function (exports, initialize) {\n\n  'use strict';\n\n  exports['default'] = {\n    name: 'add-modals-container',\n    initialize: initialize['default']\n  };\n\n});","define('progressapp/initializers/app-version', ['exports', 'progressapp/config/environment', 'ember'], function (exports, config, Ember) {\n\n  'use strict';\n\n  var classify = Ember['default'].String.classify;\n  var registered = false;\n\n  exports['default'] = {\n    name: 'App Version',\n    initialize: function initialize(container, application) {\n      if (!registered) {\n        var appName = classify(application.toString());\n        Ember['default'].libraries.register(appName, config['default'].APP.version);\n        registered = true;\n      }\n    }\n  };\n\n});","define('progressapp/initializers/export-application-global', ['exports', 'ember', 'progressapp/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);\n\n    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {\n      window[classifiedName] = application;\n    }\n  }\n\n  ;\n\n  exports['default'] = {\n    name: 'export-application-global',\n\n    initialize: initialize\n  };\n\n});","define('progressapp/models/progress-bar', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  var attr = DS['default'].attr;\n\n  var ProgressBar = DS['default'].Model.extend({\n    title: attr('string'),\n    value: attr('number'),\n    max: attr('number')\n  });\n\n  ProgressBar.reopenClass({\n    FIXTURES: [{ id: 1, title: 'security', value: 30, max: 100 }, { id: 2, title: 'javascript', value: 60, max: 100 }, { id: 3, title: 'postgres', value: 30, max: 100 }]\n  });\n\n  exports['default'] = ProgressBar;\n\n});","define('progressapp/router', ['exports', 'ember', 'progressapp/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  Router.map(function () {});\n\n  exports['default'] = Router;\n\n});","define('progressapp/routes/index', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function model() {\n      return this.store.find('progressBar');\n    },\n\n    actions: {\n      createProgressBar: function createProgressBar(data) {\n        this.store.createRecord('progressBar', data).save();\n      }\n    }\n  });\n\n});","define('progressapp/serializers/application', ['exports', 'ember-data', 'ember'], function (exports, DS, Ember) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].RESTSerializer.extend({\n    serializeIntoHash: function serializeIntoHash(hash, type, record, options) {\n      Ember['default'].merge(hash, this.serialize(record, options));\n    },\n    extract: function extract(store, type, payload, id, requestType) {\n      var newPayload = {};\n      newPayload[type.typeKey] = payload;\n\n      return this._super(store, type, newPayload, id, requestType);\n    }\n  });\n\n});","define('progressapp/services/modal-dialog', ['exports', 'ember-modal-dialog/services/modal-dialog'], function (exports, Service) {\n\n\t'use strict';\n\n\texports['default'] = Service['default'];\n\n});","define('progressapp/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"section\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('progressapp/templates/components/increment-buttons', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"button\");\n        var el2 = dom.createTextNode(\"<\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"button\");\n        var el2 = dom.createTextNode(\"<<\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"button\");\n        var el2 = dom.createTextNode(\">>\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"button\");\n        var el2 = dom.createTextNode(\">\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(fragment, [2]);\n        var element2 = dom.childAt(fragment, [4]);\n        var element3 = dom.childAt(fragment, [6]);\n        element(env, element0, context, \"action\", [\"left\"], {});\n        element(env, element1, context, \"action\", [\"leftleft\"], {});\n        element(env, element2, context, \"action\", [\"rightright\"], {});\n        element(env, element3, context, \"action\", [\"right\"], {});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('progressapp/templates/components/modal-dialog', ['exports', 'ember-modal-dialog/templates/components/modal-dialog'], function (exports, template) {\n\n\t'use strict';\n\n\texports['default'] = template['default'];\n\n});","define('progressapp/templates/components/page-header', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.0\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"h1\");\n            var el2 = dom.createTextNode(\"Create a new progress bar\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"button\");\n            var el2 = dom.createTextNode(\"x\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"label\");\n            var el2 = dom.createTextNode(\"\\n      Give your progress bar a name\\n      \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"button\");\n            var el2 = dom.createTextNode(\"Create\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, element = hooks.element, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element0 = dom.childAt(fragment, [3]);\n            var element1 = dom.childAt(fragment, [7]);\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [5]),1,1);\n            element(env, element0, context, \"action\", [\"toggleShowModal\"], {});\n            inline(env, morph0, context, \"input\", [], {\"type\": \"text\", \"placeholder\": \"Maths and Science\", \"value\": get(env, context, \"progressBarName\")});\n            element(env, element1, context, \"action\", [\"createProgressBar\"], {});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"modal-dialog\", [], {\"close\": \"toggleShowModal\", \"translucentOverlay\": true}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"header\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"button\");\n        var el3 = dom.createTextNode(\"new bar\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content, element = hooks.element, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element2 = dom.childAt(fragment, [0]);\n        var element3 = dom.childAt(element2, [3]);\n        var morph0 = dom.createMorphAt(element2,1,1);\n        var morph1 = dom.createMorphAt(element2,5,5);\n        content(env, morph0, context, \"yield\");\n        element(env, element3, context, \"action\", [\"toggleShowModal\"], {});\n        block(env, morph1, context, \"if\", [get(env, context, \"showModal\")], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('progressapp/templates/components/page-title', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"h1\");\n        dom.setAttribute(el1,\"id\",\"title\");\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);\n        content(env, morph0, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('progressapp/templates/components/progress-bar', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"progress-bar\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"progress-bar-highlight\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('progressapp/templates/components/progressbar-item', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h3\");\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\" (\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"%)\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"button\");\n        var el3 = dom.createTextNode(\"delete\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content, get = hooks.get, inline = hooks.inline, element = hooks.element;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(element0, [1]);\n        var element2 = dom.childAt(element0, [5]);\n        var morph0 = dom.createMorphAt(element1,0,0);\n        var morph1 = dom.createMorphAt(element1,2,2);\n        var morph2 = dom.createMorphAt(element0,3,3);\n        var morph3 = dom.createMorphAt(element0,7,7);\n        content(env, morph0, context, \"data.title\");\n        content(env, morph1, context, \"data.value\");\n        inline(env, morph2, context, \"increment-buttons\", [], {\"value\": get(env, context, \"data.value\"), \"update\": \"update\"});\n        element(env, element2, context, \"action\", [\"delete\"], {});\n        inline(env, morph3, context, \"progress-bar\", [], {\"value\": get(env, context, \"data.value\"), \"max\": get(env, context, \"data.max\")});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('progressapp/templates/components/progressbar-list', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0\",\n        blockParams: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement, blockArguments) {\n          var dom = env.dom;\n          var hooks = env.hooks, set = hooks.set, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          set(env, context, \"progressbar\", blockArguments[0]);\n          inline(env, morph0, context, \"progressbar-item\", [], {\"data\": get(env, context, \"progressbar\")});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"h2\");\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"section\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);\n        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);\n        var morph2 = dom.createMorphAt(fragment,4,4,contextualElement);\n        content(env, morph0, context, \"title\");\n        block(env, morph1, context, \"each\", [get(env, context, \"data\")], {}, child0, null);\n        content(env, morph2, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('progressapp/templates/index', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.0\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"progressapp.io\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          block(env, morph0, context, \"page-title\", [], {}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"section\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block, get = hooks.get, inline = hooks.inline, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        var morph1 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n        var morph2 = dom.createMorphAt(fragment,3,3,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"page-header\", [], {\"createProgressBar\": \"createProgressBar\"}, child0, null);\n        inline(env, morph1, context, \"progressbar-list\", [], {\"title\": \"My awesome progress bar list\", \"data\": get(env, context, \"model\")});\n        content(env, morph2, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('progressapp/tests/adapters/application.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - adapters');\n  test('adapters/application.js should pass jshint', function() { \n    ok(true, 'adapters/application.js should pass jshint.'); \n  });\n\n});","define('progressapp/tests/app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('app.js should pass jshint', function() { \n    ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('progressapp/tests/components/increment-buttons.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/increment-buttons.js should pass jshint', function() { \n    ok(false, 'components/increment-buttons.js should pass jshint.\\ncomponents/increment-buttons.js: line 6, col 35, Expected \\'{\\' and instead saw \\'return\\'.\\ncomponents/increment-buttons.js: line 9, col 35, Expected \\'{\\' and instead saw \\'this\\'.\\ncomponents/increment-buttons.js: line 12, col 35, Expected \\'{\\' and instead saw \\'return\\'.\\ncomponents/increment-buttons.js: line 15, col 35, Expected \\'{\\' and instead saw \\'this\\'.\\ncomponents/increment-buttons.js: line 18, col 37, Expected \\'{\\' and instead saw \\'return\\'.\\ncomponents/increment-buttons.js: line 21, col 37, Expected \\'{\\' and instead saw \\'this\\'.\\ncomponents/increment-buttons.js: line 24, col 37, Expected \\'{\\' and instead saw \\'return\\'.\\ncomponents/increment-buttons.js: line 27, col 37, Expected \\'{\\' and instead saw \\'this\\'.\\n\\n8 errors'); \n  });\n\n});","define('progressapp/tests/components/page-header.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/page-header.js should pass jshint', function() { \n    ok(true, 'components/page-header.js should pass jshint.'); \n  });\n\n});","define('progressapp/tests/components/page-title.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/page-title.js should pass jshint', function() { \n    ok(true, 'components/page-title.js should pass jshint.'); \n  });\n\n});","define('progressapp/tests/components/progress-bar.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/progress-bar.js should pass jshint', function() { \n    ok(true, 'components/progress-bar.js should pass jshint.'); \n  });\n\n});","define('progressapp/tests/components/progressbar-item.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/progressbar-item.js should pass jshint', function() { \n    ok(true, 'components/progressbar-item.js should pass jshint.'); \n  });\n\n});","define('progressapp/tests/components/progressbar-list.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/progressbar-list.js should pass jshint', function() { \n    ok(true, 'components/progressbar-list.js should pass jshint.'); \n  });\n\n});","define('progressapp/tests/helpers/resolver', ['exports', 'ember/resolver', 'progressapp/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('progressapp/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/resolver.js should pass jshint', function() { \n    ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('progressapp/tests/helpers/start-app', ['exports', 'ember', 'progressapp/app', 'progressapp/router', 'progressapp/config/environment'], function (exports, Ember, Application, Router, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n\n});","define('progressapp/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/start-app.js should pass jshint', function() { \n    ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('progressapp/tests/models/progress-bar.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/progress-bar.js should pass jshint', function() { \n    ok(true, 'models/progress-bar.js should pass jshint.'); \n  });\n\n});","define('progressapp/tests/router.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('router.js should pass jshint', function() { \n    ok(true, 'router.js should pass jshint.'); \n  });\n\n});","define('progressapp/tests/routes/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/index.js should pass jshint', function() { \n    ok(true, 'routes/index.js should pass jshint.'); \n  });\n\n});","define('progressapp/tests/serializers/application.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - serializers');\n  test('serializers/application.js should pass jshint', function() { \n    ok(true, 'serializers/application.js should pass jshint.'); \n  });\n\n});","define('progressapp/tests/test-helper', ['progressapp/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n});","define('progressapp/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('test-helper.js should pass jshint', function() { \n    ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","define('progressapp/tests/unit/adapters/application-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('adapter:application', 'Unit | Adapter | application', {});\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['serializer:foo']\n\n});","define('progressapp/tests/unit/adapters/application-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/adapters');\n  test('unit/adapters/application-test.js should pass jshint', function() { \n    ok(true, 'unit/adapters/application-test.js should pass jshint.'); \n  });\n\n});","define('progressapp/tests/unit/components/increment-buttons-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('increment-buttons', 'Unit | Component | increment buttons', {});\n\n  ember_qunit.test('it renders', function (assert) {\n    assert.expect(2);\n\n    // Creates the component instance\n    var component = this.subject();\n    assert.equal(component._state, 'preRender');\n\n    // Renders the component to the page\n    this.render();\n    assert.equal(component._state, 'inDOM');\n  });\n\n  // Specify the other units that are required for this test\n  // needs: ['component:foo', 'helper:bar']\n\n});","define('progressapp/tests/unit/components/increment-buttons-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/increment-buttons-test.js should pass jshint', function() { \n    ok(true, 'unit/components/increment-buttons-test.js should pass jshint.'); \n  });\n\n});","define('progressapp/tests/unit/components/page-header-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('page-header', 'Unit | Component | page header', {});\n\n  ember_qunit.test('it renders', function (assert) {\n    assert.expect(2);\n\n    // Creates the component instance\n    var component = this.subject();\n    assert.equal(component._state, 'preRender');\n\n    // Renders the component to the page\n    this.render();\n    assert.equal(component._state, 'inDOM');\n  });\n\n  // Specify the other units that are required for this test\n  // needs: ['component:foo', 'helper:bar']\n\n});","define('progressapp/tests/unit/components/page-header-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/page-header-test.js should pass jshint', function() { \n    ok(true, 'unit/components/page-header-test.js should pass jshint.'); \n  });\n\n});","define('progressapp/tests/unit/components/page-title-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('page-title', 'Unit | Component | page title', {});\n\n  ember_qunit.test('it renders', function (assert) {\n    assert.expect(2);\n\n    // Creates the component instance\n    var component = this.subject();\n    assert.equal(component._state, 'preRender');\n\n    // Renders the component to the page\n    this.render();\n    assert.equal(component._state, 'inDOM');\n  });\n\n  // Specify the other units that are required for this test\n  // needs: ['component:foo', 'helper:bar']\n\n});","define('progressapp/tests/unit/components/page-title-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/page-title-test.js should pass jshint', function() { \n    ok(true, 'unit/components/page-title-test.js should pass jshint.'); \n  });\n\n});","define('progressapp/tests/unit/components/progress-bar-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('progress-bar', 'Unit | Component | progress bar', {});\n\n  ember_qunit.test('it renders', function (assert) {\n    assert.expect(2);\n\n    // Creates the component instance\n    var component = this.subject();\n    assert.equal(component._state, 'preRender');\n\n    // Renders the component to the page\n    this.render();\n    assert.equal(component._state, 'inDOM');\n  });\n\n  // Specify the other units that are required for this test\n  // needs: ['component:foo', 'helper:bar']\n\n});","define('progressapp/tests/unit/components/progress-bar-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/progress-bar-test.js should pass jshint', function() { \n    ok(true, 'unit/components/progress-bar-test.js should pass jshint.'); \n  });\n\n});","define('progressapp/tests/unit/components/progressbar-item-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('progressbar-item', 'Unit | Component | progressbar item', {});\n\n  ember_qunit.test('it renders', function (assert) {\n    assert.expect(2);\n\n    // Creates the component instance\n    var component = this.subject();\n    assert.equal(component._state, 'preRender');\n\n    // Renders the component to the page\n    this.render();\n    assert.equal(component._state, 'inDOM');\n  });\n\n  // Specify the other units that are required for this test\n  // needs: ['component:foo', 'helper:bar']\n\n});","define('progressapp/tests/unit/components/progressbar-item-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/progressbar-item-test.js should pass jshint', function() { \n    ok(true, 'unit/components/progressbar-item-test.js should pass jshint.'); \n  });\n\n});","define('progressapp/tests/unit/components/progressbar-list-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('progressbar-list', 'Unit | Component | progressbar list', {});\n\n  ember_qunit.test('it renders', function (assert) {\n    assert.expect(2);\n\n    // Creates the component instance\n    var component = this.subject();\n    assert.equal(component._state, 'preRender');\n\n    // Renders the component to the page\n    this.render();\n    assert.equal(component._state, 'inDOM');\n  });\n\n  // Specify the other units that are required for this test\n  // needs: ['component:foo', 'helper:bar']\n\n});","define('progressapp/tests/unit/components/progressbar-list-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/progressbar-list-test.js should pass jshint', function() { \n    ok(true, 'unit/components/progressbar-list-test.js should pass jshint.'); \n  });\n\n});","define('progressapp/tests/unit/models/progress-bar-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForModel('progress-bar', 'Unit | Model | progress bar', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  ember_qunit.test('it exists', function (assert) {\n    var model = this.subject();\n    // var store = this.store();\n    assert.ok(!!model);\n  });\n\n});","define('progressapp/tests/unit/models/progress-bar-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/progress-bar-test.js should pass jshint', function() { \n    ok(true, 'unit/models/progress-bar-test.js should pass jshint.'); \n  });\n\n});","define('progressapp/tests/unit/routes/index-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:index', 'Unit | Route | index', {});\n\n  ember_qunit.test('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('progressapp/tests/unit/routes/index-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/index-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/index-test.js should pass jshint.'); \n  });\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('progressapp/config/environment', ['ember'], function(Ember) {\n  var prefix = 'progressapp';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"progressapp/tests/test-helper\");\n} else {\n  require(\"progressapp/app\")[\"default\"].create({\"name\":\"progressapp\",\"version\":\"0.0.0.16bafaad\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvhDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"progressapp.js"}